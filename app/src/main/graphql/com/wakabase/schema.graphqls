# GraphQL schema example
#
# https://gqlgen.com/getting-started/
##

directive @auth on FIELD | FIELD_DEFINITION

directive @isClient on FIELD | FIELD_DEFINITION

directive @isAdmin on FIELD | FIELD_DEFINITION

type Event {
    id: ID!
    name: String!
    price: Float!
    image: String!
    owner: User!
    detail: String!
    status: String! # active|| inactive
    date: String!
    createdAt: Float!
}

type Video {
    id: ID!
    author: User!
    title: String!
    link: String!
    category: String!
    like: Int!
    comment: Int!
    view: Int!
    product: String
    isLikedBy: [String!]!
    description: String!
    hasTag: [String!]!
    createdAt: Float!
}

type User {
    id: ID!
    name: String!
    email: String!
    siteWeb: String
    city: String
    phone: String!
    bio: String!
    balance: Float!
    profilePic: String
    followers: [String!]!
    following: [String!]!
    communities: [String!]!
    role: String! # client|admin
    isMonetizated: Boolean! #default false
    isVerified: Boolean!
    isOnline: Boolean!
    hasContract: Boolean!
}

type Conversation {
    id: ID!
    receiver: User!
    sender: User!
    chats: [Chat!]!
}

type Chat {
    id: ID!
    message: String!
    sender: String!
    createdAt: Float!
}

type Product {
    id: ID!
    title: String!
    theme: String!
    coverImage: String!
    author: User!
    createdAt: Float!
    price: Float!
    isArchived: Boolean!
    chapters: [Chapter!]!
}

type Chapter {
    id: ID!
    threadID: String!
    name: String!
    file: String!
    isFree: Boolean!
}

type Auth {
    token: String
}

type Verification {
    code: String!
    phone: String!
    #isVerified: Boolean!
}

type Trans {
    id: ID!
    user: User!
    sender: User!
    receiver: User!
    amount: Float!
    cost: Float!
    operation: String!
    createdAt: Float!
}

type Operation {
    id: ID!
    type: String!
    amount: Float!
    phoneNumber: String!
    user: User!
    verificationCode: String
    createdAt: Float!
}

type Comment {
    id: ID!
    author: User!
    comment: String!
    createdAt: Float!
}

type DemandMonetization {
    id: ID!
    title: String!
    content: String!
    author: User!
    status: String! # waiting, reject, done
    createdAt: Float!
}

type Community {
    id: ID!
    name: String!
    philosophy: String!
    logo: String
    messages: [Message!]!
    members: [User!]!
    admins: [User!]!
    subscription: Float!
    createdAt: Float!
}

type Message {
    id: ID!
    audio: String
    text: String
    sender: User!
    community: String!
    createdAt: Float!
}

type TokenSMS {
    token: String!
}

type Competition {
    id: ID!
    name: String!
    owner: User!
    details: String!
    videos: [Video!]! # find all videos where product=competition.ID and categorie is challenge
    price: Float!
    banner: String!
    startAt: String!
    endAt: String!
    participants: [User!]! #populate all users by IDs
    isArchived: Boolean!
    createdAt: Float!
}

type Vote {
    id: ID!
    video: Video!
    user: User!
}

type Query {
    #videos
    videos(limit: Int): [Video!]!
    video(id: ID!): Video
    myVideo(userID: ID!): [Video!]!

    #comments
    comments(videoId: String!): [Comment!]!

    #chats
    conversations: [Conversation!]! @auth

    #community
    communities: [Community!]!
    myCommunities: [Community!]!
    community(id: ID!): Community

    #users
    users: [User!]! @auth
    user(id: ID!): User
    me: User! @auth
    verifyCode(phone: String!, code: String!): Verification!

    userByPhone(phone: String!): User @auth
    friends(uid: ID): [User!]! @auth
    myFriends: [User!]! @auth

    # product
    products: [Product!]!
    myProducts: [Product!]!
    product(id: ID!): Product

    # Trans & operations
    allTrans: [Trans!]!
    userTrans(phone: String!): [Trans!]!
    trans(id: ID!): Trans

    # monetizations
    demanderMonetisations: [DemandMonetization!]!
    #demanderMonetisation(id: ID!): DemandMonetization

    #commpetions
    allCompetitions: [Competition!]! @auth
    competition(id: ID!): Competition! @auth

    #votes
    votes(id: ID!): [Vote!]!
}

type Mutation {
    #Token

    # user
    createUser(newUser: NewUserInput!): Boolean!
    loginOrCreateAccount(phone: String!, verifiedCode: String!): Auth!
    updateProfile(updateUser: UpdateUserInput!): Boolean! @auth
    updateUserOnlineState(state: Boolean!): Boolean! @auth
    followUser(id: ID!): Boolean! @auth
    unFollowUser(id: ID!): Boolean! @auth
    demanderMonetisation: Boolean! @auth

    #admin auth
    login(username: String!, passoword: String!): Auth!
    monetizate(phone: String!): Boolean! @isAdmin

    # video
    createVideo(newVideo: NewVideoInput!): Boolean! @auth
    likeVideo(id: ID!): Boolean! @auth
    createComment(newComment: NewComment!): Boolean! @auth
    viewVideo(id: ID!): Boolean! @auth

    linkWithProduct(videoId: ID!, productId: ID!): Boolean! @auth
    deleteVideo(id: ID!): Boolean! @auth

    # sms
    sendCode(phone: String!): Boolean!

    # product
    createProduct(data: NewProduct!): Boolean! @auth
    archiveProduct(id: ID!): Boolean! @auth
    addChapter(data: NewChapter!): Boolean! @auth

    # trans
    sendTrans(data: NewTrans!): Boolean! @auth
    buyTrans(data: NewSelle!): Boolean! @auth
    withdrawTrans(data: NewTrans!): Boolean! @auth
    recharge(data: NewTrans!): Boolean! @auth

    #operation
    rechargeOper(data: NewOperation!): Boolean! @auth
    withdrawOper(data: NewOperation!): Boolean! @auth

    #conversations
    createConversation(receiver: ID!): Boolean! @auth
    sendMessage(conversationId: ID!, message: String!): Boolean! @auth

    #community
    createCommunity(data: NewCommunity!): Boolean! @auth
    JoinCommunity(communityId: ID!, uid: ID!): Boolean! @auth

    deleteCommunity(id: ID!): Boolean! @auth
    publishMessage(data: NewMessage!): Boolean! @auth
    unPublishMessage(id: ID!): Boolean! @auth

    createCompetition(data: NewCompetition!): Boolean! @auth
    joinCompetition(competitionId: ID!): Boolean! @auth
    voteVideo(id: ID!): Boolean! @auth
    archiveCompetition(id: ID!): Boolean!
}

input NewChapter {
    courseID: String!
    name: String!
    file: String!
    isFree: Boolean!
}

input NewOperation {
    type: String!
    amount: Float!
    phoneNumber: String!
    verificationCode: String
}

input NewSelle {
    amount: Float!
    cost: Float!
    product: String!
    client: String!
    marchant: String!
}

input NewTrans {
    sender: String! #phone sender
    receiver: String! #phone receiver
    amount: Float!
    cost: Float!
    operation: String!
}

input NewProduct {
    title: String!
    theme: String!
    coverImage: String!
    price: Float
}

input NewVideoInput {
    title: String!
    link: String!
    category: String!
    description: String!
    hasTag: [String!]!
}

input NewComment {
    comment: String!
    videoId: String!
}

input NewUserInput {
    name: String
    siteWeb: String
    city: String
    phone: String!
    bio: String
    balance: Float!
    role: String
    profilePic: String
    isVerified: Boolean!
    hasContract: Boolean!
}

input UpdateUserInput {
    name: String
    siteWeb: String
    city: String
    bio: String
    balance: Float
    profilePic: String
}

input NewCommunity {
    name: String!
    philosophy: String!
    logo: String
    members: [String!]!
    subscription: Float!
}

input NewMessage {
    audio: String
    text: String
    community: String!
}

input NewCompetition {
    name: String!
    banner: String!
    details: String!
    price: Float!
    startAt: String!
    endAt: String!
    isArchived: Boolean!
}
